static inline int64_t hilbertOrder(int x, int y, int pow, int rotate) {
    if (pow == 0) return 0;
    int hpow = 1 << (pow - 1);
    int seg = (x < hpow) ? ((y < hpow) ? 0 : 3) : ((y < hpow) ? 1 : 2);
    seg = (seg + rotate) & 3;
    const int rotateDelta[4] = {3, 0, 0, 1};
    int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
    int nrot = (rotate + rotateDelta[seg]) & 3;
    int64_t subSquareSize = int64_t(1) << (2 * pow - 2);
    int64_t ordd = seg * subSquareSize;
    int64_t add = hilbertOrder(nx, ny, pow - 1, nrot);
    ordd += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
    return ordd;
}


struct Query {
    int64_t ord;
    int l, r, idx;

    Query(int L = 0, int R = 0, int Idx = 0) : l(L), r(R), idx(Idx) {
        calcOrder();
    }

    inline void calcOrder() {
        ord = hilbertOrder(l, r, 20, 0); // 20 should be minimum such that 2^20 >= n
    }

    bool operator < (const Query & rhs) const{
        return ord < rhs.ord;
    }
};

vector < Query > queries;
int n, q, block_size, cur_l, cur_r;
vector<int>a(N),ans_q(q);
int ans;
void init(int SZ, int Q){
    n = SZ, q = Q, block_size = q / sqrt(n) + 1;
    queries = vector < Query > (q);
    for (int i = 0; i < q; i++) ans_q[i] = 0;
    ans = 0;
}

void Scan(){
    for (int i = 0, L, R; i < q && cin >> L >> R; i++)
        queries[i] = Query(--L, --R, i);
    sort(queries.begin(), queries.end());
}

void add(int idx){

}

void remove(int idx){

}

void move(int l, int r){
    while (cur_l > l) add(--cur_l);
    while (cur_r < r) add(++cur_r);
    while (cur_l < l) remove(cur_l++);
    while (cur_r > r) remove(cur_r--);
}

void ans_queries(){
    cur_l = queries[0].l, cur_r = queries[0].l - 1;
    for (int i = 0; i < q; i++){
        move(queries[i].l, queries[i].r);
        ans_q[queries[i].idx] = ans;
    }
    for (int i = queries.back().l; i <= queries.back().r; i++) remove(i);
}
